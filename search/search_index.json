{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Universal Data Permissions Scanner (AKA UDPS) helps DevOps and data engineers quickly understand who has access to what data and how.</p> <p>DevOps and data engineers are often tasked with managing the security of the databases, data lakes or warehouses they operate. This usually involves setting permissions to enable users to query the data they need. However, as the number of users and use-cases increase, complexity explodes. It's no longer humanly possible to remember who had access to what, how and why, which makes meeting security and compliance requirements impossible.</p> <p>The root cause of this problem is that permissions to data are usually stored in normalized form, which is great for evaluating permissions but not so great when you want to clearly understand your permissions landscape. When asked \"how come Joe can query that table?\", it can be a long process to get to a definitive answer and that's just time we don't have. With so many data stores, each with its own security model, it's not feasible to manage it all manually.</p> <p>Identifying this was an issue for many of our customers, the team at Satori decided to build Universal Data Permissions Scanner, a service that helps admins to better manage their data store permissions. We believe no one should have to sift through DB system tables to get a clear picture of who can do what with data.</p>"},{"location":"#using-universal-data-permissions-scanner","title":"Using Universal Data Permissions Scanner","text":"<p>Universal Data Permissions Scanner is available in two ways: 1. universal-data-permissions-scanner - scan the permissions structure of a database to get the list of all users and data assets they can access. 2. Satori Posture manager - a fully managed SaaS solution to periodically scan, store and visualize all users and data assets they can access. Learn more here.</p>"},{"location":"#supported-data-stores","title":"Supported Data Stores","text":"<p>Universal Data Permissions Scanner supports the following data stores, with more on the way:</p> <ul> <li>Amazon Redshift</li> <li>Amazon S3</li> <li>Google BigQuery</li> <li>MongoDB</li> <li>PostgreSQL</li> <li>Snowflake</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"changelog/#011---2023-02-14","title":"[0.1.1] - 2023-02-14","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>First release on PyPI.</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>For more information on how to contribute to authz-analzer, visit this Github page.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install udps, run this command in your terminal:</p> <pre><code>$ pip install udps\n</code></pre> <p>This is the preferred method to install universal-data-permissions-scanner, as it will always install the most recent stable release.</p> <p>If you don't have [pip][] installed, this [Python installation guide][] can guide you through the process.</p>"},{"location":"installation/#from-source","title":"From source","text":"<p>The source for universal-data-permissions-scanner can be downloaded from the [Github repo][].</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone git://github.com/satoricyber/universal-data-permissions-scanner\n</code></pre> <p>Or download the [tarball][]:</p> <pre><code>$ curl -OJL https://github.com/satoricyber/universal-data-permissions-scanner/tarball/master\n</code></pre> <p>In order to isolate the authz-analyzer package from the rest of your system, it is recommended to create a virtualenv. You can find instructions on how to do this in the [Python installation guide][].</p> <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>$ pip install .\n</code></pre>"},{"location":"datastores/bigquery/","title":"Google BigQuery","text":"<p>Google BigQuery uses the Google Cloud IAM authorization system to manage access to data assets. GCP IAM implements a role-based access control approach. A GCP IAM role is a set of permissions that allow a principal to perform actions, for example, creating a dataset. To allow principals to perform the actions defined in a role on a resource, an allow policy is created which lists the principals, the role and the resource.</p> <p>GCP IAM lets you set allow policies at different levels of the resource hierarchy: organization, folder, project and resource. Allow policies grant access to all resources at lower levels of the hierarchy, for example, when setting an allow policy on a dataset, principals will get be granted the role's permissions on all the tables in the dataset.</p>"},{"location":"datastores/bigquery/#setup-access-to-scan-google-bigquery","title":"Setup Access to Scan Google BigQuery","text":"<p>universal-data-permissions-scanner needs the following permissions: <pre><code>bigquery.datasets.get\nbigquery.datasets.getIamPolicy\nbigquery.tables.get\nbigquery.tables.getIamPolicy\nbigquery.tables.list\nresourcemanager.folders.get\nresourcemanager.folders.getIamPolicy\nresourcemanager.organizations.get\nresourcemanager.organizations.getIamPolicy\nresourcemanager.projects.get\nresourcemanager.projects.getIamPolicy\niam.roles.get\nresourcemanager.folders.list\nresourcemanager.projects.list\n</code></pre></p> <p>It is recommended to group these permissions into a custom role in GCP. Because universal-data-permissions-scanner required organization-level permissions (i.e. <code>resourcemanager.organizations.get</code> and <code>resourcemanager.organizations.getIamPolicy</code>), the custom role needs to be created on the organization's Identity and Access Management (IAM) settings. Follow these steps to create a role for universal-data-permissions-scanner:</p> <ol> <li>Login to the Google Cloud Platform console and navigate to your organization</li> <li>Navigate to IAM, Roles menu and select the CREATE ROLE button</li> <li>Fill the general properties of the role like name and description</li> <li>Use the ADD PERMISSIONS dialog to add the permissions specified above</li> <li>Click CREATE to create the role</li> </ol> <p>Now you can assign to the role to the user or service account that will be used to run universal-data-permissions-scanner.</p>"},{"location":"datastores/bigquery/#scanning-google-bigquery","title":"Scanning Google BigQuery","text":"<p>By default, auth-analyzer will use the default application credentials provided by the <code>gcloud</code> command line interface. To refresh your credentials, run the following command: <pre><code>gcloud auth login --update-dac\n</code></pre> Alternatively, use the <code>--key-file</code> option to specify a path to a GCP service account key file.</p>"},{"location":"datastores/bigquery/#known-limitations","title":"Known Limitations","text":""},{"location":"datastores/databricks/","title":"Databricks","text":"<p>Databricks has two locations where identity is managed: * Account * Workspace (deprecated) There are two types of identities: * Users * service principals Users and service principals can be assigned to groups. Groups can be assigned to other groups. Users, service principals and groups are assigned to workspaces, workspaces are assigned to unity-catalog. Unity-catalog manage access to data assets. Each asset has ownership, which grants full permission. Assets are hierarchical, so permissions can be inherited from parent assets. For example, a users can be granted select on a catalog, all tables which belong to the catalog will inherit the permission.</p>"},{"location":"datastores/databricks/#setup-access-to-scan-a-databricks","title":"Setup Access to Scan a Databricks:","text":""},{"location":"datastores/databricks/#azure-setup","title":"Azure Setup","text":"<ol> <li>Generate a service principal at Azure with access to databricks.</li> <li>Provide to the service principal ccess to the account, workspace, and unity-catalog.</li> </ol>"},{"location":"datastores/databricks/#other-setups","title":"Other setups","text":"<ol> <li>Provide a user which has access to the account, workspace, and unity-catalog.</li> </ol>"},{"location":"datastores/databricks/#scanning-databricks","title":"Scanning databricks","text":""},{"location":"datastores/databricks/#azure","title":"Azure","text":"<pre><code>udps databirks \\\n    --host &lt;WORKSPACE URL&gt; \\\n    --client_id &lt;Oauth client ID generated by Azure service principal&gt; \\\n    --client_secret &lt;Oauth client secret generated by Azure service principal&gt; \\\n    --tenant-id &lt;Azure tenant ID&gt;\n</code></pre>"},{"location":"datastores/databricks/#other","title":"Other","text":"<pre><code>udps databricks \\\n    --host &lt;WORKSPACE URL&gt; \\\n    --username &lt;USERNAME&gt; \\\n    -- password &lt;PASSWORD&gt;\n</code></pre>"},{"location":"datastores/mongodb/","title":"MongoDB","text":"<p>authz-analyzer supports two types of MongoDB implementations:</p> <ul> <li>MongoDB Atlas</li> <li>Standalone MongoDB Cluster</li> </ul>"},{"location":"datastores/mongodb/#mongodb-atlas","title":"MongoDB Atlas","text":"<p>MongoDB Atlas is a managed MongoDB service. It provides managed clusters and a host of related services. authz-analyzer currently supports scanning of MongoDB cluster permissions. MongoDB Atlas implements a role-based access control (RBAC) model to manage access to data assets.</p> <p>Atlas has two types of users:</p> <ul> <li>Database Users - users that have access to an Atlas-managed MongoDB cluster. Database users may have privileges granted to them or they may be assigned with a built-in or user-defined role. Roles can be organized hierarchically.</li> <li>Organization Users - users that have access to the Atlas console. Organization users are assigned to organization roles which define their permissions and resources like projects and clusters they can access.</li> </ul>"},{"location":"datastores/mongodb/#setup-access-to-scan-a-mongodb-atlas-cluster","title":"Setup Access to Scan a MongoDB Atlas Cluster","text":"<p>To enable universal-data-permissions-scanner to scan the list of users, roles and permissions perform the following steps: 1. Create an organization API Key in the Atlas management console. 2. Grant the <code>Organization Read Only</code> role to the API key you created 3. Copy the Public and Private keys and store them for later use.</p> <p>To enable universal-data-permissions-scanner to scan the list of databases and collections in a MongoDB cluster perform the following steps: 1. Create a custom role. 2. Grant the <code>listDatabases</code> action to the role. 3. Grant the <code>listCollections</code> action on each database in the cluster to the role. 4. Create a database user and assign it to the custom role you created.</p>"},{"location":"datastores/mongodb/#scanning-a-mongodb-atlas-cluster","title":"Scanning a MongoDB Atlas Cluster","text":"<pre><code>udps atlas \\\n    --public_key &lt;PUBLIC KEY&gt; \\\n    --private_key &lt;PRIVATE KEY&gt; \\\n    --username &lt;DB USER&gt; \\\n    --password &lt;DB USER PASSWORD&gt; \\\n    --cluster_name &lt;CLUSTER&gt; \\\n    --project &lt;PROJECT&gt;\n</code></pre>"},{"location":"datastores/mongodb/#standalone-mongodb-cluster","title":"Standalone MongoDB Cluster","text":"<p>MongoDB implements a role-based access control (RBAC) model to manage access to data assets. Users are assigned with roles which have privileges. Role can be built-it or user-defined, and organized hierarchically. Roles that are assigned to the admin database have access across all databases while roles that are assigned to a specific databases have access only to those databases.</p>"},{"location":"datastores/mongodb/#setup-access-to-scan-a-standalone-mongodb-cluster","title":"Setup Access to Scan a Standalone MongoDB Cluster","text":"<ol> <li> <p>Create a role for universal-data-permissions-scanner using the following command: <pre><code>db.createRole(\n    {\n        role:\"udps\",\n        privileges: [\n            {\n                resource: {\n                    db: \"\",\n                    collection: \"\"\n                },\n                actions: [\"listDatabases\", \"listCollections\", \"viewRole\", \"viewUser\"]\n            }\n        ],\n        roles: []\n    }\n)    \n</code></pre></p> </li> <li> <p>Create a user for universal-data-permissions-scanner using the following command: <pre><code>db.createUser(\n    {\n        user: \"udps_user\",\n        roles: [\"udps\"],\n        pwd: \"&lt;password&gt;\"\n    }\n) \n</code></pre></p> </li> </ol>"},{"location":"datastores/mongodb/#scanning-a-standalone-mongodb-cluster","title":"Scanning a Standalone MongoDB Cluster","text":"<pre><code>udps mongodb \\\n    --host &lt;CLUSTER HOSTNAME&gt; \\\n    --username &lt;USERNAME&gt; \\\n    --password &lt;PASSWORD&gt;\n</code></pre>"},{"location":"datastores/mongodb/#known-limitations","title":"Known Limitations","text":"<p>The following MongoDB features are not currently supported by universal-data-permissions-scanner:</p> <ul> <li>Data API</li> <li>Cloud users</li> <li>LDAP Users</li> <li>Federated users</li> </ul>"},{"location":"datastores/postgresql/","title":"PostgreSQL","text":"<p>PostgreSQL implements a role-based access control (RBAC) model to manage access to data assets. In PostgreSQL there is no dedicated user object, instead roles that have the login property are used by users to login to the database. Roles can be organized hierarchically. All users are assigned to the <code>PUBLIC</code> role by default.</p>"},{"location":"datastores/postgresql/#setup-access-to-scan-a-postgresql-server","title":"Setup Access to Scan a PostgreSQL Server:","text":"<ol> <li>Create a role for authz-analyzer using the following command:  <pre><code>CREATE ROLE udps NOSUPERUSER NOCREATEDB NOCREATEROLE NOINHERIT LOGIN NOREPLICATION NOBYPASSRLS PASSWORD '&lt;REPLACE_WITH_A_STRONG_PASSWORD&gt;';\n</code></pre></li> <li> <p>For each database on the server, grant permissions for the universal-data-permissions-scanner role using the following command: <pre><code>GRANT SELECT ON TABLE information_schema.tables TO udps;\nGRANT SELECT ON TABLE information_schema.table_privileges TO udps;\n</code></pre></p> </li> <li> <p>For deployments which are not AWS RDS add the following permissions: <pre><code>GRANT SELECT ON TABLE pg_database TO udps;\nGRANT SELECT ON TABLE pg_catalog.pg_roles TO udps;\n</code></pre></p> </li> </ol>"},{"location":"datastores/postgresql/#scanning-a-postgresql-server","title":"Scanning a PostgreSQL Server","text":"<pre><code>udps postgres \\\n    --host &lt;HOST&gt; \\\n    --username &lt;USERNAME&gt; \\\n    --password &lt;PASSWORD&gt; \\\n    --dbname &lt;DB&gt;\n</code></pre>"},{"location":"datastores/redshift/","title":"Amazon Redshift","text":"<p>Redshift supports Users/Groups or role-based access control RBAC model to manage access to data assets.. Roles can be organized hierarchically. All users are assigned to the PUBLIC role by default.</p>"},{"location":"datastores/redshift/#setup-access-to-scan-amazon-redshift","title":"Setup Access to Scan Amazon Redshift","text":"<p>Use the following commands to create a role with the relevant database privileges, then enter them into the Redshift Credentials input fields.</p> <pre><code>-- create role with privileges;\nCREATE ROLE satori_scanner_role;\n\n-- grants the required permissions\nGRANT SELECT ON TABLE pg_database,pg_user,pg_group,svv_user_grants,svv_role_grants,svv_relation_privileges TO ROLE satori_scanner_role;\n\n-- create a dedicated user\nCREATE USER satori_scanner_user NOCREATEDB NOCREATEUSER SYSLOG ACCESS UNRESTRICTED password 'REPLACE_WITH_A_STRONG_PASSWORD';\n\n-- assign role 'SATORI_SCANNER_ROLE' to the new user\nGRANT ROLE satori_scanner_role TO satori_scanner_user;\n</code></pre>"},{"location":"datastores/redshift/#scanning-amazon-redshift","title":"Scanning Amazon Redshift","text":"<pre><code>udps redshift \\\n    --host &lt;HOST&gt; \\\n    --username &lt;USERNAME&gt; \\\n    --password &lt;PASSWORD&gt;\n</code></pre>"},{"location":"datastores/redshift/#known-limitations","title":"Known Limitations","text":""},{"location":"datastores/s3/","title":"Amazon S3","text":"<p>AWS S3 uses the AWS IAM authorization system to manage access to S3 buckets. AWS IAM implements both role-based and attribute-based access control approaches. AWS IAM lets you set allow or deny policies for actions taken on resources by principals (users). These are called identity-based policies.</p> <p>There are several types of principals in AWS IAM, including IAM user, IAM role, federated user, AWS service, or an anonymous principal. Principals, in the same account or not, may assume IAM roles to gain permissions to actions on resources. To allow a principal to assume an IAM role, a trust relationship is defined on the role which specifies which principals and under what conditions are allowed to assume the role.</p> <p>In addition to the identity-based policies described above, an S3 bucket may also have a policy attached to it called a resource-based policy. This policy can allow principals to perform actions on the S3 bucket directly.</p> <p>universal-data-permissions-scanner simulates the AWS policy evaluation process to determine the final set of allowed actions granted to principals on S3 buckets.</p>"},{"location":"datastores/s3/#setup-access-to-scan-s3-buckets-in-an-aws-account","title":"Setup Access to Scan S3 Buckets in an AWS Account","text":"<p>To enable universal-data-permissions-scanner to scan the AWS IAM system for S3 bucket permissions, perform the following steps: 1. For each AWS account, create a role to be assumed by the udps 2. Attached the following policy to the new role: <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"SatoriAnalyzer\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"iam:List*\",\n                \"iam:Get*\",\n                \"s3:ListAccessPointsForObjectLambda\",\n                \"s3:GetAccessPoint\",\n                \"s3:GetLifecycleConfiguration\",\n                \"s3:GetBucketTagging\",\n                \"s3:GetAccessPointPolicyForObjectLambda\",\n                \"s3:ListBucketVersions\",\n                \"s3:ListBucket\",\n                \"s3:GetObjectVersionAttributes\",\n                \"s3:GetBucketPolicy\",\n                \"s3:GetObjectAcl\",\n                \"s3:GetBucketObjectLockConfiguration\",\n                \"s3:GetAccessPointPolicyStatus\",\n                \"s3:GetObjectVersionAcl\",\n                \"s3:GetObjectTagging\",\n                \"s3:GetBucketOwnershipControls\",\n                \"s3:GetBucketPublicAccessBlock\",\n                \"s3:GetMultiRegionAccessPointPolicyStatus\",\n                \"s3:GetBucketPolicyStatus\",\n                \"s3:GetObjectRetention\",\n                \"s3:GetMultiRegionAccessPointPolicy\",\n                \"s3:GetBucketWebsite\",\n                \"s3:GetAccessPointPolicyStatusForObjectLambda\",\n                \"s3:ListAccessPoints\",\n                \"s3:GetMultiRegionAccessPoint\",\n                \"s3:GetObjectAttributes\",\n                \"s3:ListMultiRegionAccessPoints\",\n                \"s3:GetBucketVersioning\",\n                \"s3:GetBucketAcl\",\n                \"s3:GetObjectLegalHold\",\n                \"s3:GetAccessPointConfigurationForObjectLambda\",\n                \"s3:DescribeMultiRegionAccessPointOperation\",\n                \"s3:GetObject\",\n                \"s3:GetAccountPublicAccessBlock\",\n                \"s3:ListAllMyBuckets\",\n                \"s3:GetBucketCORS\",\n                \"s3:GetBucketLocation\",\n                \"s3:GetAccessPointPolicy\",\n                \"s3:GetObjectVersion\",\n                \"sso:ListAccountAssignments\",\n                \"sso:ListAccountsForProvisionedPermissionSet\",\n                \"sso:ListInstances\",\n                \"sso:ListPermissionSets\",\n                \"sso:DescribePermissionSet\",\n                \"identitystore:ListUsers\",\n                \"identitystore:ListGroups\",\n                \"identitystore:ListGroupMemberships\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\n</code></pre> 3. Add the following statement to the role\u2019s Trust Relationships <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"Statement1\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": [\n                    \"&lt;ARN-TRUSTED-PRINCIPAL&gt;\"\n                ]\n            },\n            \"Action\": \"sts:AssumeRole\"\n        }\n    ]\n}\n</code></pre> <code>ARN-TRUSTED-PRINCIPAL</code> is the AWS ARN of the authenticated principal, such as an IAM or federated user which will be running universal-data-permissions-scanner.</p>"},{"location":"datastores/s3/#scanning-s3-buckets-in-an-aws-account","title":"Scanning S3 Buckets in an AWS Account","text":"<p>universal-data-permissions-scanner will assume the role arn specified in the <code>--target-account-params</code> parameter to scan the permissions of S3 buckets located in the role's AWS account . Use the optional <code>--additional-account-params</code> parameter to specify additional AWS accounts which may contain information about principals. For example, it's common to organize AWS accounts hierarchically, and manage users in a root account, allowing them to assume roles in sub-accounts.</p> <p><code>AWS-ACCOUNT-ASSUME-ROLE-PARAMS</code> is string parameter with format: <code>\"role_arn: &lt;ROLE-ARN&gt;\"</code></p> <pre><code>udps aws-s3 \\\n    --target-account-params &lt;AWS-ACCOUNT-ASSUME-ROLE-PARAMS&gt;\n    [--additional-account-params  &lt;AWS-ACCOUNT-ASSUME-ROLE-PARAMS&gt;]\n</code></pre>"},{"location":"datastores/s3/#known-limitations","title":"Known Limitations","text":"<p>The following AWS features are not currently supported by universal-data-permissions-scanner:</p> <ul> <li>Policy evaluation <ul> <li>AWS organization policies</li> <li>Principal permissions boundary    </li> </ul> </li> <li>Policy elements<ul> <li>Placeholders like {\"aws:username}\"</li> <li>Session tags</li> <li>Conditions    </li> </ul> </li> <li>S3 bucket<ul> <li>ACL policy</li> <li>Public access settings</li> <li>Cross-origin resource sharing settings</li> </ul> </li> <li>Principal resolving from:<ul> <li>SAML providers</li> <li>Web identity providers</li> <li>OIDC providers</li> <li>Canonical ID in S3 bucket policy </li> </ul> </li> </ul>"},{"location":"datastores/snowflake/","title":"Snowflake","text":"<p>Snowflake implements a role-based access control (RBAC) model to manage access to data assets. Roles are granted with privileges on data assets and users are assigned to roles, which can be organized hierarchically. All users are assigned to the <code>PUBLIC</code> role by default.</p>"},{"location":"datastores/snowflake/#setup-access-to-scan-a-snowflake-account","title":"Setup Access to Scan a Snowflake Account","text":"<ol> <li>Create a role for universal-data-permissions-scanner using the following command: <pre><code>CREATE ROLE UDPS_ROLE;\n</code></pre></li> <li>Grant privileges to the role you created using the following command: <pre><code>GRANT IMPORTED PRIVILEGES ON DATABASE SNOWFLAKE TO ROLE UDPS_ROLE;\nGRANT USAGE ON WAREHOUSE &lt;REPLACE_WITH_WAREHOUSE_NAME&gt; TO ROLE UDPS_ROLE;\nGRANT IMPORT SHARE ON ACCOUNT TO UDPS_ROLE;\n</code></pre></li> <li>Create a user for universal-data-permissions-scanner and assign it to the role you created using the following commands: <pre><code>CREATE USER UDPS password='&lt;REPLACE_WITH_A_STRONG_PASSWORD&gt;' default_role = UDPS_ROLE default_warehouse=&lt;WAREHOUSE&gt;;\nGRANT ROLE UDPS_ROLE TO USER UDPS;\n</code></pre></li> </ol>"},{"location":"datastores/snowflake/#scanning-snowflake","title":"Scanning Snowflake","text":"<pre><code>udps snowflake \\\n    --account &lt;REPLACE_WITH_ACCOUNT&gt; \\\n    --username &lt;USERNAME&gt; \\\n    --password &lt;PASSWORD&gt; \n</code></pre>"},{"location":"datastores/snowflake/#known-limitations","title":"Known Limitations","text":"<p>The following Snowflake features are not currently supported by universal-data-permissions-scanner:</p> <ul> <li>SNOWFLAKE database roles</li> <li>Permissions on objects to a share via a database role</li> </ul>"}]}